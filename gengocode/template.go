package main

var creatorTemplate = `
type creator_{{.Name}} struct {
	buf []{{.TName}}
	idx int
}

func (cr *creator_{{.Name}}) create(chunk int) *{{.TName}} {
 	if cr.idx >= len(cr.buf) {
  		cr.buf = make([]{{.TName}}, chunk)
		cr.idx = 0
	}
 	current := &cr.buf[cr.idx]
 	cr.idx++
 	return current
}

type creatorSlice_{{.Name}} struct {
	buf []{{.TName}}
 	idx int
}

func (cr *creatorSlice_{{.Name}}) create(slen, scap, chunk int) []{{.TName}} {
	if scap > chunk {
  		return make([]{{.TName}}, slen, scap)
 	}
 	if cr.idx + scap > len(cr.buf) {
  		cr.buf = make([]{{.TName}}, chunk, chunk) 
  		cr.idx = 0
 	}
 	current := cr.buf[cr.idx:cr.idx+slen:cr.idx+scap]
 	cr.idx += scap
 	return current
}

type creatorPtr_{{.Name}} struct {
 	buf []*{{.TName}}
 	idx int
}

func (cr *creatorPtr_{{.Name}}) create(slen, scap, chunk int) []*{{.TName}} {
 	if scap > chunk {
  		return make([]*{{.TName}}, slen, scap)
 	}
 	if cr.idx + scap > len(cr.buf) {
  		cr.buf = make([]*{{.TName}}, chunk, chunk)
 	 	cr.idx = 0
 	}
 	current := cr.buf[cr.idx:cr.idx+slen:cr.idx+scap]
 	cr.idx += scap
 	return current
}

func New_{{.TName}}() *{{.TName}} {
	return smallObjCreator.creator_{{.TName}}.create(256)
}

func NewSlice_{{.TName}}(slen, scap int) []{{.TName}} {
	return smallObjCreator.creatorSlice_{{.TName}}.create(slen , scap, 4096)
}

func NewPtrSlice_{{.TName}}(slen, scap int) []*{{.TName}} {
	return smallObjCreator.creatorPtr_{{.TName}}.create(slen , scap, 4096)
}
`

var headerTemplate = `// Code generated by tools. DO NOT EDIT.
`
